CREATE DATABASE sipedb;	
\c sipedb

CREATE TABLE disciplina (
	codigo INTEGER NOT NULL,
	nome VARCHAR(60) NOT NULL,
	ch INTEGER NOT NULL,
	ementa VARCHAR(2000) NOT NULL,
	objetivo VARCHAR(2000) NOT NULL,
	bibliografia_basica VARCHAR(2000) NOT NULL,
	bibliografia_complementar VARCHAR(2000) NOT NULL,
	autor VARCHAR(20) NOT NULL,
		constraint pkDisciplina primary key (codigo) );

CREATE TABLE planejamento (
	id serial NOT NULL,
	ano INTEGER NOT NULL,
	semestre INTEGER NOT NULL,
	data_inicio DATE NOT NULL,
	data_termino DATE,
	situacao CHAR(1) NOT NULL,
	autor VARCHAR(20) NOT NULL,
		constraint pkPlanejamento primary key (id) );

CREATE TABLE usuario (
	id serial,
	login VARCHAR(20) NOT NULL unique,
	senha VARCHAR(50) NOT NULL,
	apelido VARCHAR(60) NOT NULL,
	sexo CHAR(1) NOT NULL,
	nivel CHAR(1) NOT NULL,
	autor VARCHAR(20) NOT NULL,
		constraint pkUsuario primary key (id) );

CREATE TABLE professor (
	matricula INTEGER NOT NULL,
	nome VARCHAR(60) NOT NULL,
	cep INTEGER NOT NULL,
	logradouro VARCHAR(100) NOT NULL,
	numero VARCHAR(15) NOT NULL,
	complemento VARCHAR,
	bairro VARCHAR(40) NOT NULL,
	cidade VARCHAR(35) NOT NULL,
	uf CHAR(2) NOT NULL,
	id INTEGER NOT NULL,
	autor VARCHAR(20) NOT NULL,
			constraint pkProfessor primary key (matricula),
			constraint fkProfessor foreign key (id)
				references usuario(id) );

CREATE TABLE curso (
	numero INTEGER NOT NULL,
	nome VARCHAR(80) NOT NULL,
	sigla VARCHAR(4) NOT NULL,
	tipo CHAR(1) NOT NULL,
	matricula INTEGER,
	autor VARCHAR(20) NOT NULL,
			constraint pkCurso primary key (numero),
			constraint fkCurso foreign key (matricula)
				references professor(matricula) );				

CREATE TABLE curso_disciplina (
	numero INTEGER NOT NULL,
	codigo INTEGER NOT NULL,
	modulo CHAR(4) NOT NULL,
	autor VARCHAR(20) NOT NULL,
			constraint pk_curso_disciplina primary key(numero,codigo),
			constraint fkcurso_disciplina_curso foreign key (numero)
				references curso (numero),
			constraint fkCurso_disciplina foreign key (codigo)
				references disciplina (codigo) );
				
CREATE TABLE planejamento_curso (
	numero INTEGER NOT NULL,
	id INTEGER NOT NULL,
	autor VARCHAR(20) NOT NULL,
			constraint pk_planejamento_curso primary key(id,numero),
			constraint fkPlanejamento_curso_planejamento foreign key (id)
				references planejamento (id) ,
			constraint fkPlanejamento_curso foreign key (numero)
				references curso (numero) );				
				
CREATE TABLE planoensino (
	codigo 	serial NOT NULL,
	competencia VARCHAR(2000),
	conteudo_programatico VARCHAR(4000),
	recurso_metodologico VARCHAR(400),
	criterio_avaliacao VARCHAR(2000),
	instrumento_avaliacao VARCHAR(2000),
	AEC VARCHAR(4000),
	bibliografia_sugerida VARCHAR(1000),
	situacao CHAR(1) NOT NULL,
	obs_devolucao  VARCHAR(1000),
	data_aprovacao DATE,
	id INTEGER,
	codigo_disc INTEGER,
	turno CHAR(1), /*(M, V, N) Matutino, Vespertino ou Noturno. Obrigatório se a situação for diferente de “Em andamento”. */
	matricula_professor integer NOT NULL,
	matricula_coordenador integer,
	autor VARCHAR(20) NOT NULL,
			constraint pkPlanoensino primary key (codigo),
			constraint fkPlanoensino_planejamento foreign key (id)
				references planejamento(id), 
			constraint fkPlanoensino_disciplina foreign key (codigo_disc)
				references disciplina(codigo),				
			constraint fkPlanoensino_professor foreign key (matricula_professor)
				references professor(matricula),				
			constraint fkPlanoensino foreign key (matricula_coordenador)
				references professor(matricula) 
);

create table log(
	cod serial primary key not null,
	data timestamp not null,
	autor varchar(20) not null,
	alteracao varchar(6) not null,
	tabela varchar (20)	
);
GRANT USAGE ON log_cod_seq to sipe;
GRANT INSERT ON log to sipe;

create table log_login(
	cod serial primary key not null,
	login VARCHAR(20) NOT NULL , 
	ip varchar(20) not null,
	data date not null,
	hora time not null	
);

create or replace function gera_log() returns trigger as

$$

BEGIN
	IF (TG_OP = 'DELETE') THEN
		insert into log(data,autor,alteracao,tabela) values (current_timestamp,old.autor,TG_OP,TG_TABLE_NAME);
		return old;
	ELSIF (TG_OP = 'INSERT') THEN
		insert into log(data,autor,alteracao,tabela) values (current_timestamp,new.autor,TG_OP,TG_TABLE_NAME);
		return new;
	ELSIF (TG_OP = 'UPDATE') THEN
		insert into log(data,autor,alteracao,tabela) values (current_timestamp,new.autor,TG_OP,TG_TABLE_NAME);
		return new;
	END IF;
END;

$$language 'plpgsql';


create trigger tr_gera_log after insert or update or delete on curso
for each row execute procedure gera_log();

create trigger tr_gera_log after insert or update or delete on curso_disciplina
for each row execute procedure gera_log();

create trigger tr_gera_log after insert or update or delete on disciplina
for each row execute procedure gera_log();

create trigger tr_gera_log after insert or update or delete on planejamento
for each row execute procedure gera_log();

create trigger tr_gera_log after insert or update or delete on planejamento_curso
for each row execute procedure gera_log();

create trigger tr_gera_log after insert or update or delete on planoensino
for each row execute procedure gera_log();

create trigger tr_gera_log after insert or update or delete on professor
for each row execute procedure gera_log();

create trigger tr_gera_log after insert or update or delete on usuario
for each row execute procedure gera_log();

INSERT INTO usuario(login,senha,apelido,sexo,nivel,autor) VALUES('admin',md5('admin'),'Administrador','M','C','admin');
INSERT INTO usuario(login,senha,apelido,sexo,nivel,autor) VALUES('Fabricio',md5('fabricio'),'Fabricio','M','C','admin');

INSERT INTO usuario(login,senha,apelido,sexo,nivel,autor) VALUES('Fabricio',md5('fabricio'),'Fabricio','M','C','admin');

GRANT SELECT,INSERT,DELETE,UPDATE ON curso,curso_disciplina,disciplina,log,log_login,planejamento,planejamento_curso,planoensino, professor,usuario to sipe;
GRANT USAGE ON log_cod_seq,log_login_cod_seq,planejamento_id_seq,planoensino_codigo_seq, usuario_id_seq to sipe;





